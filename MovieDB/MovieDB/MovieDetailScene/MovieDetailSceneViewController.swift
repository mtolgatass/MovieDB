//
//  MovieDetailSceneViewController.swift
//  MovieDB
//
//  Created by Tolga TaÅŸ on 20.12.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit
import TMDBSwift

protocol MovieDetailSceneDisplayLogic: class {
    func displayMovieDetail(viewModel: MovieDetailScene.Something.ViewModel)
}

class MovieDetailSceneViewController: UIViewController, MovieDetailSceneDisplayLogic {
    var interactor: MovieDetailSceneBusinessLogic?
    var router: (NSObjectProtocol & MovieDetailSceneRoutingLogic & MovieDetailSceneDataPassing)?
    
    var movieId: Int = 0
    var castArray = [MovieCastMDB]() {
        didSet {
            castTableView.reloadData()
        }
    }
    
    lazy var scrollView: UIScrollView = {
        let scrollView = UIScrollView()
        return scrollView
    }()
    
    lazy var containerView: UIView = {
        let view = UIView()
        view.backgroundColor = .white
        return view
    }()
    lazy var stackView: UIStackView = {
        let stack: UIStackView = UIStackView()
        stack.axis = .vertical
        stack.distribution = .fill
        stack.alignment = .fill
        stack.spacing = 8
        return stack
    }()
    
    lazy var imageView = UIImageView()
    lazy var imageContainer = UIView()
    lazy var seperatorView: UIView = {
        let view = UIView()
        view.backgroundColor = .lightGray
        return view
    }()
    
    lazy var emptyView: UIView = {
        let view = UIView()
        view.backgroundColor = .clear
        return view
    }()
    
    lazy var overviewTextView: UITextView = {
        var textView = UITextView()
        textView.font = UIFont.systemFont(ofSize: 12, weight: .light)
        textView.isUserInteractionEnabled = false
        textView.isScrollEnabled = false
        return textView
    }()
    
    lazy var ratingLabel: UILabel = {
        var label = UILabel()
        label.font = UIFont.systemFont(ofSize: 14, weight: .medium)
        label.textAlignment = .center
        return label
    }()
    
    lazy var castTableView = UITableView()

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = MovieDetailSceneInteractor()
        let presenter = MovieDetailScenePresenter()
        let router = MovieDetailSceneRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    // MARK: Routing
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        configureUI()
        getMovieDetail(movieId: movieId)
    }
  
    // MARK: Do something
  
    //@IBOutlet weak var nameTextField: UITextField!
    
    func setTableView() {
        castTableView.register(UITableViewCell.self, forCellReuseIdentifier: "cell")
        castTableView.delegate = self
        castTableView.dataSource = self
    }
    
    func configureUI() {
        setTableView()
        
        self.view.addSubview(containerView)
        containerView.addSubview(stackView)
        containerView.addSubview(scrollView)
        scrollView.addSubview(stackView)
        // StackView
        stackView.addArrangedSubview(imageContainer)
        imageContainer.addSubview(imageView)
        stackView.addArrangedSubview(seperatorView)
        stackView.addArrangedSubview(overviewTextView)
        stackView.addArrangedSubview(ratingLabel)
        stackView.addArrangedSubview(castTableView)
        
        containerView.snp.makeConstraints { (maker) in
            maker.edges.equalToSuperview()
        }
        
        scrollView.snp.makeConstraints { (maker) in
            maker.edges.equalToSuperview()
        }
        
        stackView.snp.makeConstraints { (maker) in
            maker.top.equalToSuperview()
            maker.bottom.equalToSuperview()
            maker.centerX.equalToSuperview()
            maker.leading.equalTo(containerView.snp.leading)
            maker.trailing.equalTo(containerView.snp.trailing)
        }
        
        imageContainer.snp.makeConstraints { (maker) in
            maker.height.equalTo(300)
            maker.centerX.equalToSuperview()
            maker.leading.trailing.equalToSuperview()
        }
        
        imageView.snp.makeConstraints { (maker) in
            maker.centerX.equalToSuperview()
            maker.height.equalToSuperview()
        }
        
        overviewTextView.snp.makeConstraints { (maker) in
            maker.height.equalTo(100)
        }
        
        ratingLabel.snp.makeConstraints { (maker) in
            maker.height.equalTo(32)
        }
        
        castTableView.snp.makeConstraints { (maker) in
            maker.height.equalTo(180)
        }
        
        seperatorView.snp.makeConstraints { (maker) in
            maker.height.equalTo(1)
        }
    }
  
    func getMovieDetail(movieId: Int) {
        interactor?.getMovieDetail(movieId: movieId)
        self.view.showLoading()
    }
  
    func displayMovieDetail(viewModel:
        MovieDetailScene.Something.ViewModel) {
        self.view.stopLoading()
        guard let movieDetail = viewModel.movieDetail else { return }
        
        //Title
        self.title = movieDetail.title
        
        //Poster
        guard let url = URL(string: "\(Constants.photoBaseUrl)w200\(movieDetail.poster_path ?? "")") else { return }
        do {
            let data = try Data(contentsOf: url)
            imageView.image = UIImage(data: data)
        } catch {
            imageView.image = UIImage(named: "moviePlaceholder")
            imageView.snp.makeConstraints { (maker) in
                maker.width.equalTo(300)
            }
            print(error.localizedDescription)
        }
        
        //Overview
        overviewTextView.text = (movieDetail.overview?.isEmpty ?? true) ? "No movie detail found." : movieDetail.overview
        
        //Rating
        ratingLabel.text = "Rating: \(movieDetail.vote_average ?? 0.0) / 10 (\(Int(movieDetail.vote_count ?? 0.0)) Votes)"
        
        //Cast
        guard let cast = viewModel.credits?.cast else { return }
        castArray = cast
        
    }
}

extension MovieDetailSceneViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return "Cast"
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return castArray.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath)
        
        cell.selectionStyle = .none
        cell.textLabel?.font = .systemFont(ofSize: 14, weight: .medium)
        cell.textLabel?.text = castArray[indexPath.row].name
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let castMember = castArray[indexPath.row]
        
        let personDetailScene = PersonDetailSceneViewController()
        personDetailScene.personId = castMember.id
        
        self.navigationController?.pushViewController(personDetailScene, animated: true)
    }
    
    
}
