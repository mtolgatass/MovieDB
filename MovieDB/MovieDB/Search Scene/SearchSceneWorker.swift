//
//  SearchSceneWorker.swift
//  MovieDB
//
//  Created by Tolga TaÅŸ on 19.12.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import TMDBSwift
import PromiseKit

class SearchSceneWorker {
    
    // MARK: - Search Services
    func searchMovie(text: String, page: Int) -> Promise<[MovieMDB]>{
        return Promise { seal in
            SearchMDB.movie(query: text, language: "EN", page: page, includeAdult: true, year: nil, primaryReleaseYear: nil) { (result, movies) in
                guard let movies = movies else {
                    if let error = result.error {
                        seal.reject(error)
                    }
                    return
                }
                seal.fulfill(movies)
            }
        }
    }
    
    func searchPeople(text: String, page: Int) -> Promise<[PersonResults]>{
        return Promise { seal in
            SearchMDB.person(query: text, page: page, includeAdult: true) { (result, people) in
                guard let people = people else {
                    if let error = result.error {
                        seal.reject(error)
                    }
                    return
                }
                seal.fulfill(people)
            }
        }
    }
    
    // MARK: - Discover Services
    func discoverMovie(page: Int) -> Promise<[MovieMDB]> {
        return Promise { seal in
            DiscoverMovieMDB.discoverMovies(page: page) { (result, movies) in
                guard let movies = movies else {
                    if let error = result.error {
                        seal.reject(error)
                    }
                    return
                }
                seal.fulfill(movies)
            }
        }
    }
    
    func discoverPeople(page: Int) -> Promise<[PersonResults]> {
        return Promise { seal in
            PersonMDB.popular(page: page) { (result, people) in
                guard let people = people else {
                    if let error = result.error {
                        seal.reject(error)
                    }
                    return
                }
                seal.fulfill(people)
            }
        }
    }
    
    func discoverGenre() -> Promise<[GenresMDB]> {
        return Promise { seal in
            GenresMDB.genres(listType: .movie, language: "EN") { (result, genres) in
                guard let genres = genres else {
                    if let error = result.error {
                        seal.reject(error)
                    }
                    return
                }
                seal.fulfill(genres)
            }
        }
    }
}
