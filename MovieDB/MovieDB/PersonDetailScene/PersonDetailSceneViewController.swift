//
//  PersonDetailSceneViewController.swift
//  MovieDB
//
//  Created by Tolga TaÅŸ on 20.12.2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import TMDBSwift
import SnapKit

protocol PersonDetailSceneDisplayLogic: class {
    func displaySomething(viewModel: PersonDetailScene.Something.ViewModel)
}

class PersonDetailSceneViewController: UIViewController, PersonDetailSceneDisplayLogic {
    var interactor: PersonDetailSceneBusinessLogic?
    var router: (NSObjectProtocol & PersonDetailSceneRoutingLogic & PersonDetailSceneDataPassing)?
    
    var personId: Int = 0
    var creditsArray = [PersonMovieCast]() {
        didSet {
            creditsTableView.reloadData()
        }
    }
    
    lazy var scrollView: UIScrollView = {
        let scrollView = UIScrollView()
        return scrollView
    }()
    
    lazy var containerView: UIView = {
        let view = UIView()
        view.backgroundColor = .white
        return view
    }()
    
    lazy var seperatorView: UIView = {
        let view = UIView()
        view.backgroundColor = .lightGray
        return view
    }()
    
    lazy var stackView: UIStackView = {
        let stack: UIStackView = UIStackView()
        stack.axis = .vertical
        stack.distribution = .fill
        stack.alignment = .fill
        stack.spacing = 8
        return stack
    }()
    
    lazy var emptyView: UIView = {
        let view = UIView()
        view.backgroundColor = .clear
        return view
    }()
    
    lazy var imageView = UIImageView()
    lazy var imageContainer = UIView()
    
    lazy var creditsTableView = UITableView()
    
    lazy var bioTextView: UITextView = {
        var textView = UITextView()
        textView.font = UIFont.systemFont(ofSize: 12, weight: .light)
        textView.isEditable = false
        return textView
    }()

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = PersonDetailSceneInteractor()
        let presenter = PersonDetailScenePresenter()
        let router = PersonDetailSceneRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    // MARK: Routing
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        
        configureUI()
        doSomething()
    }
  
    // MARK: Do something
  
    //@IBOutlet weak var nameTextField: UITextField!
    
    func configureUI() {
        setTableView()
        
        self.view.addSubview(containerView)
        containerView.addSubview(scrollView)
        scrollView.addSubview(stackView)
        imageContainer.addSubview(imageView)
        
        stackView.addArrangedSubview(imageContainer)
        stackView.addArrangedSubview(seperatorView)
        stackView.addArrangedSubview(bioTextView)
        stackView.addArrangedSubview(creditsTableView)
        stackView.addArrangedSubview(emptyView)
        
        containerView.snp.makeConstraints { (maker) in
            maker.edges.equalToSuperview()
        }
        
        scrollView.snp.makeConstraints { (maker) in
            maker.edges.equalToSuperview()
        }
        
        stackView.snp.makeConstraints { (maker) in
            maker.top.equalToSuperview()
            maker.bottom.equalToSuperview()
            maker.centerX.equalToSuperview()
            maker.leading.equalTo(containerView.snp.leading)
            maker.trailing.equalTo(containerView.snp.trailing)
        }
        
        imageContainer.snp.makeConstraints { (maker) in
            maker.height.equalTo(300)
            maker.centerX.equalToSuperview()
            maker.leading.trailing.equalToSuperview()
        }
        
        imageView.snp.makeConstraints { (maker) in
            maker.centerX.equalToSuperview()
            maker.height.equalToSuperview()
        }
        
        bioTextView.snp.makeConstraints { (maker) in
            maker.height.equalTo(120)
        }
        
        creditsTableView.snp.makeConstraints { (maker) in
            maker.height.equalTo(240)
        }
        
        seperatorView.snp.makeConstraints { (maker) in
            maker.height.equalTo(1)
        }
    }
    
    func setTableView() {
        creditsTableView.register(UITableViewCell.self, forCellReuseIdentifier: "cell")
        creditsTableView.delegate = self
        creditsTableView.dataSource = self
    }
  
    func doSomething() {
        self.view.showLoading()
        interactor?.getPersonDetail(personId: personId)
    }
  
    func displaySomething(viewModel: PersonDetailScene.Something.ViewModel) {
        
        guard let personDetail = viewModel.personDetail else { return }
        self.view.stopLoading()
        
        //Title
        title = personDetail.name
        
        //Profile Picture
        guard let url = URL(string: "\(Constants.photoBaseUrl)w200\(personDetail.profile_path ?? "")") else { return }
        do {
            let data = try Data(contentsOf: url)
            imageView.image = UIImage(data: data)
        } catch {
            imageView.image = UIImage(named: "profilePlaceholder")
            imageView.snp.makeConstraints { (maker) in
                maker.width.equalTo(300)
            }
            print(error.localizedDescription)
        }
        
        //Bio
        bioTextView.text = (personDetail.biography?.isEmpty ?? true) ? "No information is found." : personDetail.biography
        
        //Credits
        guard let credits = viewModel.credits else { return }
        creditsArray = credits
    }
}

extension PersonDetailSceneViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return "Credits"
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return creditsArray.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath)
        
        cell.selectionStyle = .none
        cell.textLabel?.font = .systemFont(ofSize: 14, weight: .medium)
        cell.textLabel?.text = creditsArray[indexPath.row].title
        
        return cell
    }
}
